{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto/./src/components/Card.js","webpack://mesto/./src/components/FormValidator.js","webpack://mesto/./src/components/Popup.js","webpack://mesto/./src/components/PopupWithForm.js","webpack://mesto/./src/components/PopupWithImage.js","webpack://mesto/./src/components/Section.js","webpack://mesto/./src/components/UserInfo.js","webpack://mesto/./src/components/Api.js","webpack://mesto/./src/components/PopupCardDelete.js","webpack://mesto/./src/pages/index.js","webpack://mesto/./src/utils/constants.js"],"sourcesContent":["/**\r\n * Класс, представляющий карточку места\r\n */\r\nexport default class Card {\r\n   /**\r\n   * Создает экземпляр карточки места\r\n   *\r\n   * @constructor\r\n   * @param {string} placeName - название места\r\n   * @param {string} placeImgSrc - URL-адрес изображения места\r\n   * @param {Array} likes - массив объектов, каждый из которых содержит информацию о пользователе поставившем лайк данной карточке\r\n   * @param {object} config - словарик всех необходимых селекторов\r\n   * @param {string} ownerId - id владельца карточки\r\n   * @param {string} myId - id текущего пользователя\r\n   * \r\n   * @param {function} handeCardClick - callback клика по картинке\r\n   * @param {function} confirmDelete - подтвердить удаление карточки\r\n   * @param {function} setLikeOnServer - отправляет на сервер запрос об установке лайка\r\n   * @param {function} deleteLikeFromServer - отправляет на сервер запрос о снятии лайка \r\n   */\r\n  // Примечание: очень громоздкий конструктор\r\n  constructor(\r\n    { placeName, placeImgSrc, likes, config, ownerId, myId },\r\n    { handleCardClick, confirmDelete, setLikeOnServer, deleteLikeFromServer }\r\n  ) {\r\n    this._placeName = placeName;\r\n    this._placeImgSrc = placeImgSrc; \r\n    this._likes = likes;\r\n    this._countLike = likes.length;\r\n    this._ownerCardId = ownerId;\r\n    this._myId = myId;\r\n\r\n    this._handeCardClick = handleCardClick;\r\n    this._confirmDelete = confirmDelete;\r\n    this._setLikeOnServer = setLikeOnServer;\r\n    this._deleteLikeFromServer = deleteLikeFromServer;\r\n\r\n    this._templateSelector = config.templateSelector;\r\n    this._placesItemSelector = config.cardSelector;\r\n    this._classLikeActive = config.classLikeActive;\r\n    this._btnDellHiddenClass = config.btnDellHiddenClass;\r\n\r\n    this._placeElement = this._getPlaceElement();\r\n    this._img = this._placeElement.querySelector( config.imgSelector );\r\n    this._imgTitle = this._placeElement.querySelector( config.titleSelector );\r\n    this._imgLike = this._placeElement.querySelector( config.likeSelector );\r\n    this._btnPlaceDel = this._placeElement.querySelector( config.btnDelSelector );\r\n    this._countLikeContainer = this._placeElement.querySelector( config.countLikeSelector );\r\n\r\n    this._isLikeInProcess = false; // флаг для корректной обработки дабл-клика по лайку\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @returns {Node} html код из шаблона для карточки\r\n   */\r\n  _getPlaceElement = () => {\r\n    return document\r\n      .querySelector( this._templateSelector )\r\n      .content\r\n      .querySelector( this._placesItemSelector )\r\n      .cloneNode( true );\r\n  } \r\n\r\n  /**\r\n   * В зависимости от наличия или отсутсвия активного состояния лайка \r\n   * отправляет запрос установки или снятия лайка на сервер\r\n   * @returns response об операции\r\n   */\r\n  _toggleLikeConditionOnserver = () => {\r\n    return this._imgLike.classList.contains( this._classLikeActive ) \r\n      ? this._deleteLikeFromServer()\r\n      : this._setLikeOnServer()\r\n  }\r\n\r\n  /**\r\n   * Блокирует клики по лайку до окончания обработки первого.\r\n   * Обрабатывает response сервера.\r\n   */\r\n  _toggleLikeCondition = () => {\r\n    if ( this._isLikeInProcess === false ) {\r\n      this._isLikeInProcess = true;\r\n      this._toggleLikeConditionOnserver()\r\n        .then( data => {\r\n          this._countLikeContainer.textContent = data.likes.length;\r\n          this._doLikeActive();\r\n        })\r\n        .catch( err => console.log( err ) )\r\n        .finally( () => this._isLikeInProcess = false );\r\n    }\r\n  }\r\n\r\n  _setEventListeners = () => {\r\n    this._img.addEventListener( 'click', () => {\r\n      this._handeCardClick( this._placeImgSrc, this._placeName )\r\n    } );\r\n    this._imgLike.addEventListener( 'mousedown', this._toggleLikeCondition );\r\n    this._btnPlaceDel.addEventListener( 'click', this._confirmDelete );\r\n  }\r\n\r\n  /**\r\n   * Метод удаляет карточку и обнуляет ссылку на ячейку памяти\r\n   */\r\n  deleteCard = () => {\r\n    this._placeElement.remove();\r\n    this._placeElement = null;\r\n  };\r\n\r\n  _fillCard = () => {\r\n    this._img.src = this._placeImgSrc;\r\n    this._img.alt += ` ${ this._placeName }`; \r\n    this._imgTitle.textContent = this._placeName;\r\n    this._countLikeContainer.textContent = this._countLike;\r\n    this._checkOwner();\r\n    this._checkMyLike();\r\n  }\r\n\r\n  /**\r\n   * Проверяет является ли карточка моей.\r\n   * Скрывает кнопку удаления в противном случае\r\n   */\r\n  _checkOwner = () => {\r\n    if ( this._ownerCardId === this._myId ) {\r\n      this._btnPlaceDel.classList.add( this._btnDellHiddenClass );\r\n    }\r\n  }\r\n\r\n  _doLikeActive = () => {\r\n    this._imgLike.classList.toggle( this._classLikeActive );\r\n  }\r\n\r\n  /**\r\n   * Проверяет есть ли среди лайков карточки мой и рендерит его\r\n   */\r\n  _checkMyLike = () => {\r\n    this._likes.forEach( element => {\r\n      if ( element._id === this._myId ) {\r\n        this._doLikeActive();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Возвращает заполненный HTML-элемент карточки места.\r\n   *\r\n   * @method\r\n   * @returns {Node} HTML-элемент карточки места.\r\n   */\r\n  getPlaceCard = () => {\r\n    this._fillCard();\r\n    this._setEventListeners();\r\n\r\n    return this._placeElement;\r\n  }\r\n}","/**\r\n * Класс, представляющий валидацию формы\r\n */\r\nexport default class FormValidator {\r\n  /**\r\n   * Создать экземпляр формы под валидацию\r\n   * @constructor\r\n   * @param {Object} config - необходимые селекторы\r\n   * @param {Node} form - форма\r\n   */\r\n  constructor( config, form ) {\r\n    this._inputUnvalidateClass = config.inputUnvalidateClass;\r\n    this._form = form;\r\n    this._inputList = this._getFormElements( form, config.inputSelector );\r\n    this._errorList = this._getFormElements( form, config.errorSelector );\r\n    this._btnSubmit = form.querySelector( config.submitBtnSelector );\r\n  }\r\n\r\n  _getFormElements = ( form, formSelector ) => {\r\n    return Array.from( form.querySelectorAll( formSelector ) );\r\n  }\r\n\r\n  _hasInvalidInput = () => {\r\n    return this._inputList.some( input => !this._checkValidity( input ));\r\n  }\r\n\r\n  _showInputError = ( textError, errorElement, inputElement ) => {\r\n    inputElement.classList.add( this._inputUnvalidateClass );\r\n    errorElement.textContent = textError;\r\n  }\r\n\r\n  _hideInputError = ( errorElement, inputElement ) => {\r\n    inputElement.classList.remove( this._inputUnvalidateClass );\r\n    errorElement.textContent = '';\r\n  } \r\n\r\n  _checkInputValidity = ( inputElement, errorElement ) => {\r\n    this._checkValidity( inputElement )\r\n      ? this._hideInputError ( errorElement, inputElement ) \r\n      : this._showInputError (\r\n          inputElement.validationMessage, \r\n          errorElement, \r\n          inputElement\r\n        );\r\n  }\r\n\r\n  _checkValidity( item ) {\r\n    return item.validity.valid;\r\n  }\r\n\r\n  _toggleButtonState = () => {\r\n    this._hasInvalidInput() ?\r\n      this._btnSubmit.setAttribute( 'disabled', true ):\r\n      this._btnSubmit.removeAttribute( 'disabled' );\r\n  }\r\n\r\n  // Примечание: если не использовать preventDefault, очищать инпуты не потребуется,\r\n  // но потребуется setTimeout (сначала reset, затем toggleButtonState)\r\n  // иначе reset выполнится после вложенного кода аналогично submit\r\n  _setEventListeners = () => {\r\n    this._form.addEventListener( 'reset', ev => {\r\n      ev.preventDefault();\r\n      this._inputList.forEach( ( inputElement, index ) => {\r\n        inputElement.value = '';\r\n        this._hideInputError( this._errorList[ index ], inputElement );\r\n      });\r\n      this._toggleButtonState();\r\n    })\r\n\r\n    this._inputList.forEach( ( inputElement, index ) => {\r\n      inputElement.addEventListener( 'input', () => {\r\n        this._checkInputValidity( inputElement, this._errorList[index] );\r\n        this._toggleButtonState();\r\n      });\r\n    })\r\n  } \r\n\r\n  /**\r\n   * Включить валидацию переданной формы\r\n   */\r\n  enableValidation = () => {\r\n    this._setEventListeners();\r\n  };\r\n}","/**\r\n * класс описывает общий функционал всех popup-окон\r\n */\r\nexport default class Popup {\r\n  /**\r\n   * @constructor\r\n   * @param {string} classBtnClose\r\n   * @param {string} classPopupOpened\r\n   * @param {string} popupSelector\r\n   */\r\n  constructor( { classBtnClose, classPopupOpened }, popupSelector ) {\r\n    this._classPopupOpened = classPopupOpened;\r\n    this._classBtnClose = classBtnClose;\r\n    this._popup = document.querySelector( popupSelector );\r\n    this._handleEscClose = this._handleEscClose.bind( this );\r\n    this.open = this.open.bind( this );\r\n  }\r\n\r\n  /**\r\n   * Открыть попап\r\n   * повесить слушатель-закрывашку по клику на esc\r\n   * @param {HTMLElement} popupElement\r\n   */\r\n  open() {\r\n    this._popup.classList.add( this._classPopupOpened );\r\n    document.addEventListener( 'keydown', this._handleEscClose );\r\n  }\r\n\r\n  _handleEscClose( ev ) {\r\n    if ( ev.key === 'Escape' ) { this.close(); }\r\n  }\r\n\r\n  /**\r\n   * Закрыть попап и снять слушатель-закрывашку\r\n   */\r\n  close() {\r\n    this._popup.classList.remove( this._classPopupOpened );\r\n    document.removeEventListener( 'keydown', this._handleEscClose );\r\n  }\r\n\r\n  /**\r\n   * Установка слушателей закрывашек \r\n   * по клику на крестик и оверлей\r\n   */\r\n  setEventListeners() {\r\n    this._popup.addEventListener( 'mousedown', ev => {\r\n      if (ev.target.classList.contains( this._classPopupOpened ) || \r\n          ev.target.classList.contains( this._classBtnClose )) {\r\n        this.close();\r\n      } \r\n    } );\r\n  }\r\n}","import Popup from \"./Popup.js\";\r\n\r\n/**\r\n * класс описывает дополнительный функционал для popup с картинкой карточки\r\n */\r\nexport default class PopupWithForm extends Popup {\r\n  /**\r\n   * @constructor\r\n   * @param {object} popupConfig - классы передаваемые в Popup\r\n   * @param {string} inputSelector - класс, по которому можно найти input-элементы\r\n   * @param {string} popupSelector - класс рабочего popup-окна\r\n   * @param {string} nameForm - атрибут name html элемента формы внутри рабочего popup-окна\r\n   * @param {string} btnSubmitSelector - класс кнопки формы ответственной за submit\r\n   * @param {string} btnSubmitFetchCondition - текст, который должен отобразиться внутри кнопки на время fetch-запроса\r\n   * @param {Function} callbackSubmit - обработчик submit события\r\n   */\r\n  constructor ({ \r\n    popupConfig, inputSelector, popupSelector, nameForm, \r\n    btnSubmitSelector, btnSubmitFetchCondition\r\n  }, callbackSubmit ) {\r\n\r\n    super( popupConfig, popupSelector );\r\n    this._callbackSubmit = callbackSubmit;\r\n    this._classInput = inputSelector;\r\n    this._btnSubmitFetchCondition = btnSubmitFetchCondition;\r\n    \r\n    this._form = document.forms[nameForm];\r\n    this._inputs = Array.from( \r\n      this._form.querySelectorAll( this._classInput )\r\n    );\r\n    this._btnSubmit = this._form.querySelector( btnSubmitSelector );\r\n  }\r\n\r\n  /**\r\n   * устанавливает в input-элементы указанные значения\r\n   * @param {Array} values - массив значений для input-элементов \r\n   */\r\n  // Примечание: слабым местом такой реализации выступает соответствие ключа и значения атрибута\r\n  // Значение ключа же задаётся в классе UserInfo, который ничего не знает о PopupWithForm\r\n  setInputValues = ( values ) => {\r\n    this._inputs.forEach( ( input, i ) =>\r\n      input.value = values[ input.getAttribute( 'name' ) ]\r\n    );\r\n  }\r\n\r\n  // Примечание: такая реализация не работает\r\n  // _getInputValues() {\r\n  //   return this._inputs.reduce((data, input) => \r\n  //     data[input.getAttribute('name')] = input.value, \r\n  //     {}\r\n  //   );\r\n  // }\r\n  _getInputValues() {\r\n    return this._inputs.reduce((data, input) => {\r\n      data[input.getAttribute('name')] = input.value;\r\n      return data;\r\n    }, {});\r\n  }\r\n\r\n  /**\r\n   * устанавливает слушатели закрывашки, а также submit - события для текущего popup-окна\r\n   */\r\n  setEventListeners() {\r\n    super.setEventListeners();\r\n    this._form.addEventListener( 'submit', (ev) => {\r\n      ev.preventDefault();\r\n      this._fetchCondition();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Улучшает UX опыт - изменяет надпись кнопки-submit на время fetch-запроса.\r\n   * После возвращает её текст к исходному состоянию\r\n   */\r\n  _fetchCondition() {\r\n    const btnSubmitOriginalText = this._btnSubmit.textContent;\r\n    this._btnSubmit.textContent = this._btnSubmitFetchCondition;\r\n    this._callbackSubmit( this._getInputValues() )\r\n      .then( () => this._btnSubmit.textContent = btnSubmitOriginalText )\r\n      .catch( err => console.log( err ) )\r\n      .finally( () => this.close() );\r\n  }\r\n\r\n  /**\r\n   * закрывает текущий popup, предварительно очищая форму\r\n   */\r\n  close() {\r\n    this._form.reset(); // сначала стереть\r\n    super.close();\r\n  }\r\n\r\n  /**\r\n   * открывает текущий popup, предварительно устанавливая корректное состояние кнопки\r\n   */\r\n  open() {\r\n    super.open();\r\n  }\r\n}","import Popup from \"./Popup.js\";\r\n/**\r\n * класс наследуемый от Popup. Работает с модальным окном full image\r\n */\r\nexport default class PopupWithImage extends Popup {\r\n  /**\r\n   * @constructor\r\n   * @param {object} popupConfig - классы передаваемые в Popup\r\n   * @param {string} popupSelector - класс рабочего popup-окна\r\n   * @param {string} figureSelector - селектор элемента с картинкой и подписью\r\n   * @param {string} imgSelector - селектор картинки внутри фигуры\r\n   * @param {string} figcaptionSelector - селектор подписи внутри фигуры\r\n   */\r\n  constructor( { \r\n    popupConfig,\r\n    popupSelector,\r\n    figureSelector, \r\n    imgSelector,\r\n    figcaptionSelector  \r\n  } ) {\r\n    \r\n    super( popupConfig, popupSelector );\r\n    this._figure = document.querySelector( figureSelector );\r\n    this._figureImg = this._figure.querySelector( imgSelector );\r\n    this._figcaption = this._figure.querySelector( figcaptionSelector );\r\n  }\r\n\r\n  /**\r\n   * открывает модальное окно с изображением карточки\r\n   * @param {URL} placeImgSrc - url к картинке\r\n   * @param {string} placeName - название к карточке\r\n   */\r\n  open( placeImgSrc, placeName ) {\r\n    this._figureImg.src = placeImgSrc;\r\n    this._figureImg.alt = placeName;\r\n    this._figcaption.textContent = placeName;\r\n    super.open();\r\n  }\r\n}","/**\r\n * класс работающий с разметкой\r\n */\r\nexport default class Section {\r\n  /**\r\n   * @constructor\r\n   * @param {Function} funRenderer - callback для рендеринга исходного массива карточек\r\n   * @param {string} selectorCards - селектор html-блока со всеми карточками\r\n   */\r\n  constructor( funRenderer, selectorCards ) {\r\n    this._cards = document.querySelector( selectorCards );\r\n    this._renderer = funRenderer;\r\n  }\r\n\r\n  /**\r\n   * метод для рендера карточек с сервера\r\n   * @param {Array} data - массив объектов с данными карточки\r\n   */\r\n  renderCards( data ) {\r\n    for ( let i = data.length - 1; i > -1; i-- ){\r\n      this._renderer( data[ i ] );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * добавить новую карточку в разметку\r\n   * @param {HTMLElement} newElement - готовый html элемент для вставки\r\n   */\r\n  addItem = ( newElement ) => {\r\n    this._cards.prepend( newElement );\r\n  }\r\n}","/**\r\n * класс работающий с информацией о пользователе на странице\r\n */\r\nexport default class UserInfo {\r\n  /**\r\n   * @constructor\r\n   * @param {string} selectorNameUserContainer\r\n   * @param {string} selectorUserAboutContainer\r\n   * @param {string} selectorUserAvatar\r\n   */\r\n  constructor( { \r\n    selectorNameUserContainer, \r\n    selectorUserAboutContainer,\r\n    selectorUserAvatar \r\n  } ) {\r\n    // Примечание: при увеличении количества полей данных, код линейно вырастет в объеме\r\n    this._nameContainer = document.querySelector( selectorNameUserContainer );\r\n    this._aboutContainer = document.querySelector( selectorUserAboutContainer );\r\n    this._userAvatar = document.querySelector( selectorUserAvatar );\r\n  }\r\n\r\n  /**\r\n   * позволяет получить текущие данные пользователя\r\n   * @returns возвращает массив вида [name, about]\r\n   */\r\n  getUserInfo = () => {\r\n    // Примечание: важно, чтобы значение ключа совпадало со значением\r\n    // атрибута 'name' целевых input-элементов \r\n    return {\r\n      nameUser: this._nameContainer.textContent,\r\n      aboutUser: this._aboutContainer.textContent\r\n    }\r\n  }\r\n\r\n  /**\r\n   * позволяет установить новые данные пользователя\r\n   * @param {string} newName \r\n   * @param {string} newAbout \r\n   */\r\n  setUserInfo( newName, newAbout ) {\r\n    this._nameContainer.textContent = newName;\r\n    this._aboutContainer.textContent = newAbout;\r\n  }\r\n\r\n  /**\r\n   * Устанавливает ссылку на изображение для аватара\r\n   * @param {string} url \r\n   */\r\n  setAvatar( url ) {\r\n    this._userAvatar.src = url;\r\n  }\r\n\r\n  /**\r\n   * Устанавливает начальные значения \"Имя\", \"Обо мне\" и аватар\r\n   * @param {object} data данные о пользователе \r\n   */\r\n  setInitialUserInfo( data ){\r\n    this.setUserInfo( data.name, data.about );\r\n    this.setAvatar( data.avatar );\r\n  }\r\n}","/**\r\n * Класс, содержащий все необходимые fetch-запросы к серверу\r\n */\r\nexport default class Api {\r\n  /**\r\n   * @constructor\r\n   * @param {string} token токен для авторизации на сервере\r\n   * @param {string} myId личный id пользователя, назначенный сервером\r\n   * @param {string} urlServer\r\n   * @param {string} qUsersMe строка для запроса в users/me\r\n   * @param {string} qCards строка для запроса в cards\r\n   * @param {string} qLikes строка для запроса в likes\r\n   * @param {string} qAvatar строка для запроса в avatar\r\n   */\r\n  constructor({ \r\n    token, myId, urlServer, qUsersMe, qCards, qLikes, qAvatar\r\n  }) {\r\n    this._token = token;\r\n    this._urlServer = urlServer;\r\n    this._myId = myId;\r\n    this._qUsersMe = qUsersMe;\r\n    this._qCards = qCards;\r\n    this._qLikes = qLikes;\r\n    this._qAvatar = qAvatar;\r\n  }\r\n\r\n  /**\r\n   * Позволяет получить данные пользователя, необходимые для рендера связанных разделов\r\n   * @returns response данных пользователя\r\n   */\r\n  getUserDataFromServer() {\r\n    return fetch( this._urlServer + this._qUsersMe, {\r\n      headers: {\r\n        authorization: this._token\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Позволяет получить данные обо всех карточках с сервера\r\n   * @returns response начальных карточек\r\n   */\r\n  getInitialCards() {\r\n    return fetch( this._urlServer + this._qCards, {\r\n      headers: {\r\n        authorization: this._token\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Позволяет обновить \"Имя\" и \"О себе\" пользователя\r\n   * @param {string} newName \r\n   * @param {string} newAbout \r\n   * @returns \r\n   */\r\n  updateUserData( newName, newAbout ) {\r\n    return fetch( this._urlServer + this._qUsersMe, {\r\n      method: 'PATCH',\r\n      headers: {\r\n        authorization: this._token,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        name: newName,\r\n        about: newAbout\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Позволяет отправить данные новой карточки на сервер\r\n   * @param {string} namePlace \r\n   * @param {string} linkImg \r\n   * @returns response сервера с данными новой карточки\r\n   */\r\n  addNewCard( namePlace, linkImg ) {\r\n    return fetch( this._urlServer + this._qCards, {\r\n      method: 'POST',\r\n      headers: {\r\n        authorization: this._token,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        name: namePlace,\r\n        link: linkImg\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Позволяет удалить по id карточку с сервера\r\n   * @param {string} id \r\n   * @returns response сервера об удалении\r\n   */\r\n  deleteCard( id ) {\r\n    return fetch( this._urlServer + this._qCards + id, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        authorization: this._token,\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * позволяет установить по id карточки лайк пользователя\r\n   * @param {string} id \r\n   * @returns response сервера с обновленными данными карточки (лайков)\r\n   */\r\n  setLike( id ){\r\n    return fetch( this._urlServer + this._qCards + id + this._qLikes, {\r\n      method: 'PUT',\r\n      headers: {\r\n        authorization: this._token,\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n  * позволяет удалить по id карточки лайк пользователя\r\n  * @param {string} id \r\n  * @returns response сервера с обновленными данными карточки (лайков)\r\n  */\r\n  deleteLike( id ) {\r\n    return fetch( this._urlServer + this._qCards + id + this._qLikes, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        authorization: this._token,\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Позволяет обновить аватар пользователя\r\n   * @param {string} newAvatarUrl \r\n   * @returns response сервера о смене аватара\r\n   */\r\n  updateAvatar( newAvatarUrl ) {\r\n    return fetch( this._urlServer + this._qUsersMe + this._qAvatar , {\r\n      method: 'PATCH',\r\n      headers: {\r\n        authorization: this._token,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        avatar: newAvatarUrl\r\n      })\r\n    })\r\n  }\r\n}","import Popup from \"./Popup.js\";\r\n\r\n/**\r\n * Класс описывает функционал модального окна подтверждения удаления карточки\r\n */\r\nexport default class PopupCardDelete extends Popup{\r\n  /**\r\n   * @constructor\r\n   * @param {object} popupConfig\r\n   * @param {string} popupSelector\r\n   * @param {string} nameForm\r\n   */\r\n  constructor( { popupConfig, popupSelector, nameForm } ) {\r\n    super( popupConfig, popupSelector );\r\n    this._delCard;\r\n    this._form = document.forms[nameForm];\r\n  }\r\n\r\n  /**\r\n   * Устанавливает слушатели на модальное окно.\r\n   */\r\n  setEventListeners() {\r\n    super.setEventListeners();\r\n    this._form.addEventListener( 'submit', (ev) => {\r\n      ev.preventDefault();\r\n      this._delCard();\r\n      this.close();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Открывает модальное окно подтвержедения удаления карточки.\r\n   * Прокидыает функцию удаления конкретно этой карточки.\r\n   * @param {Function} callback \r\n   */\r\n  open( callback ) {\r\n    this._delCard = callback;\r\n    super.open()\r\n  }\r\n}","// Примечание: уточнить, что значит \"Обрабатывайте ошибку внутри этого блока. Если нет времени писать сложную логику, хотя бы просто выведите ошибку в консоль.\" Что подразумевается под сложной логикой. Какую обработку ошибок имеют ввиду.\r\n// Примечание: уточнить на счет async/await и .then\\.catch - есть ли преимущества? Как выбрать?\r\n\r\n// импорты\r\nimport './index.css';\r\nimport Card from '../components/Card.js';\r\nimport FormValidator from '../components/FormValidator.js';\r\nimport PopupWithForm from '../components/PopupWithForm.js';\r\nimport PopupWithImage from '../components/PopupWithImage.js';\r\nimport Section from '../components/Section.js';\r\nimport UserInfo from '../components/UserInfo.js';\r\nimport Api from '../components/Api.js';\r\nimport PopupCardDelete from '../components/PopupCardDelete';\r\nimport {\r\n  btnEditProfile, btnAddPlace, cardConfig, btnEditAvatar, validateConfig,\r\n  popupWithImageConfig, popupAddPlaceConfig, popupEditProfileConfig,\r\n  selectorCards, userInfoConfig, apiConfig, popupConfirmDeleteConfig,\r\n  popupEditAvatarConfig,\r\n } from '../utils/constants.js';\r\n\r\n// Переменные\r\nlet myId;\r\n\r\n// функции\r\nfunction createCardConfigProperties( data ) {\r\n  return {\r\n    config: cardConfig,\r\n    placeName: data.name,\r\n    placeImgSrc: data.link,\r\n    likes: data.likes,\r\n    ownerId: data.owner._id,\r\n    myId: myId,\r\n  }\r\n}\r\n\r\nfunction renderer( data ) {\r\n  const cardObject = new Card(\r\n    createCardConfigProperties( data ),\r\n    {\r\n      handleCardClick: () => popupWithImage.open( data.link, data.name ),\r\n      setLikeOnServer: () => handleResponse( api.setLike( data._id ) ),\r\n      deleteLikeFromServer: () => handleResponse( api.deleteLike( data._id ) ),\r\n      confirmDelete: () => popupConfirmDeleteCard.open( () => {\r\n        handleResponse( api.deleteCard( data._id ) )\r\n          .then( () => cardObject.deleteCard() )\r\n          .catch( err => console.log( err ) )\r\n      }),\r\n    }\r\n  );\r\n  const newCard = cardObject.getPlaceCard();\r\n  cards.addItem( newCard );\r\n}\r\n\r\nfunction handleResponse( response ){\r\n  return response\r\n    .then( res => {\r\n      if ( !res.ok ) {\r\n        throw new Error( res );\r\n      }\r\n      return res.json();\r\n    })\r\n}\r\n\r\n// объекты классов\r\nconst popupConfirmDeleteCard = new PopupCardDelete( popupConfirmDeleteConfig );\r\nconst popupWithImage = new PopupWithImage( popupWithImageConfig ); \r\nconst userInfo = new UserInfo( userInfoConfig );\r\nconst api = new Api( apiConfig );\r\nconst cards = new Section( renderer, selectorCards );\r\n\r\nconst popupEditProfile = new PopupWithForm( \r\n  popupEditProfileConfig, ( { nameUser, aboutUser } ) => {\r\n    userInfo.setUserInfo( nameUser, aboutUser );\r\n    return handleResponse( api.updateUserData( nameUser, aboutUser ) )\r\n});\r\n\r\nconst popupAddCard = new PopupWithForm( popupAddPlaceConfig, ({\r\n  namePlace, urlImage }) => {\r\n    return handleResponse( api.addNewCard( namePlace, urlImage ) )\r\n      .then( data => renderer( data ) )\r\n});\r\n\r\nconst popupEditAvatar = new PopupWithForm( popupEditAvatarConfig, ( { urlImage } ) => {\r\n  return handleResponse( api.updateAvatar( urlImage ) )\r\n    .then( data => userInfo.setAvatar( data.avatar ) )\r\n});\r\n\r\n\r\n// Запуск скриптов\r\n\r\n// Примечание: сначала получить id, затем генерировать карточки. \r\n// Для решения вместо цепочки последовательных .then использовано Promise.all\r\nPromise.all([ \r\n  handleResponse( api.getUserDataFromServer() ), \r\n  handleResponse( api.getInitialCards() )\r\n])\r\n  .then( ([ dataOne, dataTwo ]) => {\r\n    userInfo.setInitialUserInfo( dataOne );\r\n    myId = dataOne._id;\r\n    cards.renderCards( dataTwo );\r\n  })\r\n  .catch( ([ errOne, errTwo ]) => console.log( errOne, errTwo ) )\r\n\r\npopupWithImage.setEventListeners();\r\npopupAddCard.setEventListeners();\r\npopupEditProfile.setEventListeners();\r\npopupConfirmDeleteCard.setEventListeners();\r\npopupEditAvatar.setEventListeners();\r\n\r\n// Примечание: нижестоящий код пытается повесить валиадцию на форму без инпутов.\r\n// Мысли: имеется форма без инпутов, для которой валидация ненужна. Соответственно, её следовало бы исключить. Это можно сделать, составив список исключений и сверяться внутри перебора, но т.к. она не содержит инпутов, а следовательно и некуда установить листенеры, система потратит ресурсы только на попытку подключить валидацию. Создание списка исключений же задействует еще немного памяти и я не уверен, что это стоящая оптимизация.\r\n// Также можно попробовать сверяться с содержимым формы: если есть инпуты, то... через form.elements, но это также ресурсы на проверку того, что в принципе не будет потреблять ресурсы, т.к. не существует (нельзя установить валидацию на то, чего нет)\r\n// Итог: оставить в текущем виде, ждать комментариев от ревьюера или позднее уточнить у наставника\r\nArray.from( document.forms ).forEach( form => {\r\n  const newValidator = new FormValidator ( validateConfig, form );\r\n  newValidator.enableValidation();\r\n} );\r\n\r\nbtnEditAvatar.addEventListener( 'click', popupEditAvatar.open )\r\nbtnAddPlace.addEventListener( 'click', popupAddCard.open );\r\nbtnEditProfile.addEventListener( 'click', () => {\r\n  popupEditProfile.setInputValues( userInfo.getUserInfo() );\r\n  popupEditProfile.open() \r\n});\r\n\r\n// включить анимацию на страничке\r\nsetTimeout( () => document.querySelector( '.preload' ).classList.remove( 'preload' ), 500 );","// Кнопки\r\nexport const btnEditProfile = document.querySelector('.profile__btn-edit');\r\nexport const btnAddPlace = document.querySelector('.profile__btn-add');\r\nexport const btnEditAvatar = document.querySelector('.profile__avatar-edit');\r\n\r\n// Селекторы\r\nexport const selectorCards = '.cards__grid';\r\n\r\n// Служебные\r\nconst inputSelector = '.popup__input';\r\nconst popupBtnSubmitSelector = '.popup__btn-submit';\r\nconst btnSubmitFetchCondition = 'Сохранение...';\r\nconst popupConfig = {\r\n  classBtnClose: 'popup__btn-close',\r\n  classPopupOpened: 'to-visible'\r\n}\r\n\r\n// Конфиги\r\nexport const popupWithImageConfig = {\r\n  popupConfig: popupConfig,\r\n  popupSelector: '.popup_type_full-img-place',\r\n  figureSelector: '.popup__figure',\r\n  imgSelector: '.popup__img',\r\n  figcaptionSelector: '.popup__figcaption'\r\n}\r\n\r\nexport const popupAddPlaceConfig = {\r\n  popupConfig: popupConfig,\r\n  inputSelector: inputSelector,\r\n  popupSelector: '.popup_type_add-place',\r\n  nameForm: 'addNewPlace',\r\n  btnSubmitSelector: popupBtnSubmitSelector,\r\n  btnSubmitFetchCondition: btnSubmitFetchCondition,\r\n}\r\n\r\nexport const popupEditProfileConfig = {\r\n  popupConfig: popupConfig,\r\n  inputSelector: inputSelector,\r\n  popupSelector: '.popup_type_edit-profile',\r\n  nameForm: 'editProfileText',\r\n  btnSubmitSelector: popupBtnSubmitSelector,\r\n  btnSubmitFetchCondition: btnSubmitFetchCondition,\r\n}\r\n\r\nexport const userInfoConfig = {\r\n  selectorNameUserContainer: '.profile__title-name',\r\n  selectorUserAboutContainer: '.profile__subtitle',\r\n  selectorUserAvatar: '.profile__avatar'\r\n}\r\n\r\nexport const validateConfig = {\r\n  inputSelector: inputSelector,\r\n  submitBtnSelector: '.popup__btn-submit',\r\n  inputUnvalidateClass: 'popup__input_type_error',\r\n  errorSelector: '.popup__error',\r\n};\r\n\r\nexport const cardConfig = {\r\n  cardSelector: '.cards__grid-item',\r\n  imgSelector: '.card__photo',\r\n  titleSelector: '.card__title',\r\n  likeSelector: '.card__like',\r\n  btnDelSelector: '.card__del-card-btn',\r\n  classLikeActive: 'card__like_active',\r\n  templateSelector: '.template',\r\n  countLikeSelector: '.card__like-count',\r\n  btnDellHiddenClass: 'to-visible'\r\n}\r\n\r\nexport const apiConfig = {\r\n  token: 'e07a98d9-da5b-4bb3-83f5-8be59ad95ea9',\r\n  myId: '7fe16738c600cfe949208d93', \r\n  urlServer: 'https://mesto.nomoreparties.co/v1/cohort-65/',\r\n  qUsersMe: 'users/me',\r\n  qCards: 'cards/',\r\n  qLikes: '/likes/',\r\n  qAvatar: '/avatar'\r\n}\r\n\r\nexport const popupConfirmDeleteConfig = {\r\n  popupConfig: popupConfig,\r\n  popupSelector: '.popup_type_confirmDelete',\r\n  nameForm: 'confirmCardDelete'\r\n}\r\n\r\nexport const popupEditAvatarConfig = {\r\n  popupConfig: popupConfig,\r\n  inputSelector: inputSelector,\r\n  popupSelector: '.popup_type_editAvatar',\r\n  nameForm: 'avatarUpdate',\r\n  btnSubmitSelector: popupBtnSubmitSelector,\r\n  btnSubmitFetchCondition: btnSubmitFetchCondition,\r\n}"],"names":["Card","_createClass","_ref","_ref2","_this","placeName","placeImgSrc","likes","config","ownerId","myId","handleCardClick","confirmDelete","setLikeOnServer","deleteLikeFromServer","_classCallCheck","_defineProperty","document","querySelector","_templateSelector","content","_placesItemSelector","cloneNode","_imgLike","classList","contains","_classLikeActive","_deleteLikeFromServer","_setLikeOnServer","_isLikeInProcess","_toggleLikeConditionOnserver","then","data","_countLikeContainer","textContent","length","_doLikeActive","catch","err","console","log","finally","_img","addEventListener","_handeCardClick","_placeImgSrc","_placeName","_toggleLikeCondition","_btnPlaceDel","_confirmDelete","_placeElement","remove","src","alt","concat","_imgTitle","_countLike","_checkOwner","_checkMyLike","_ownerCardId","_myId","add","_btnDellHiddenClass","toggle","_likes","forEach","element","_id","_fillCard","_setEventListeners","this","templateSelector","cardSelector","classLikeActive","btnDellHiddenClass","_getPlaceElement","imgSelector","titleSelector","likeSelector","btnDelSelector","countLikeSelector","FormValidator","form","formSelector","Array","from","querySelectorAll","_inputList","some","input","_checkValidity","textError","errorElement","inputElement","_inputUnvalidateClass","_hideInputError","_showInputError","validationMessage","_hasInvalidInput","_btnSubmit","setAttribute","removeAttribute","_form","ev","preventDefault","index","value","_errorList","_toggleButtonState","_checkInputValidity","inputUnvalidateClass","_getFormElements","inputSelector","errorSelector","submitBtnSelector","key","item","validity","valid","Popup","popupSelector","classBtnClose","classPopupOpened","_classPopupOpened","_classBtnClose","_popup","_handleEscClose","bind","open","close","removeEventListener","target","PopupWithForm","_Popup","_inherits","_super","callbackSubmit","popupConfig","nameForm","btnSubmitSelector","btnSubmitFetchCondition","_assertThisInitialized","call","values","_inputs","i","getAttribute","_callbackSubmit","_classInput","_btnSubmitFetchCondition","forms","reduce","_this2","_get","_getPrototypeOf","prototype","_fetchCondition","_this3","btnSubmitOriginalText","_getInputValues","reset","PopupWithImage","figureSelector","figcaptionSelector","_figure","_figureImg","_figcaption","Section","funRenderer","selectorCards","newElement","_cards","prepend","_renderer","UserInfo","selectorNameUserContainer","selectorUserAboutContainer","selectorUserAvatar","nameUser","_nameContainer","aboutUser","_aboutContainer","_userAvatar","newName","newAbout","url","setUserInfo","name","about","setAvatar","avatar","Api","token","urlServer","qUsersMe","qCards","qLikes","qAvatar","_token","_urlServer","_qUsersMe","_qCards","_qLikes","_qAvatar","fetch","headers","authorization","method","body","JSON","stringify","namePlace","linkImg","link","id","newAvatarUrl","PopupCardDelete","_delCard","callback","btnEditProfile","btnAddPlace","btnEditAvatar","popupBtnSubmitSelector","popupWithImageConfig","popupAddPlaceConfig","popupEditProfileConfig","validateConfig","cardConfig","popupEditAvatarConfig","renderer","cardObject","owner","createCardConfigProperties","popupWithImage","handleResponse","api","setLike","deleteLike","popupConfirmDeleteCard","deleteCard","newCard","getPlaceCard","cards","addItem","response","res","ok","Error","json","userInfo","popupEditProfile","updateUserData","popupAddCard","urlImage","addNewCard","popupEditAvatar","_ref3","updateAvatar","Promise","all","getUserDataFromServer","getInitialCards","_ref4","_ref5","_slicedToArray","dataOne","dataTwo","setInitialUserInfo","renderCards","_ref6","_ref7","errOne","errTwo","setEventListeners","enableValidation","setInputValues","getUserInfo","setTimeout"],"sourceRoot":""}